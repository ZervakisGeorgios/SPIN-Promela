#define N 2		//Constant which defines the password's size
bit init_data[N*4];	// global variable which holds each arrays elements
proctype proc (byte my_id,next_id,previous_id; chan to_next,from_previous,to_receiver)
{
	bit my_code[N];  		//local variable array which stores the elements of the current array			
	bit previous_code[N];		//local variable array which stores elements from previous arrays
	bit xprevious_code[N];		//local variable array which stores elements from previous arrays
	bit R[N*4];			//local variable array which stores every processors data
	bit RT[N];			//local variable array which stores the password
	
	byte i=0;
 	do							//a loop so as to initialize the array of each processor
	:: i<N -> my_code[i] = init_data[my_id*N+i]; i++	//the formula my_id*N+i is being used so as to retrieve
	:: i==N -> break					// the correct elements. When the i reaches N the loop
	od;							//terminates its function.
	
	byte q=0;						//This loop is being used so as to store the current
	do							//processor's array elements into the R, via the formula
	:: q<N -> R[my_id*N+q]= my_code[q] -> q++		//my_id*N+q and by the fact that we know its arrays
	:: q==N -> break					//id, the process to store its processors elements to 
	od;							//the correct slot is easy.
	
	byte kk=0;						//This loop sends each processor's array elements to
	do							//the next processor.
	::kk<N -> to_next!my_code[kk]->kk++
	::kk==N-> break
	od;
	
	byte k=0;						//This loop is being used from the processors so as to
	do							// receive the arrays from their previous processors 
	::k<N -> from_previous?previous_code[k] -> k++
	::k==N-> break
	od;
	
	byte e=0;						//In this loop every processor stores each
	do							// previous's array into the correct slots
	:: e<N -> R[previous_id*N+e]=previous_code[e] -> e++	//due to the fact that every processor
	:: e==N -> break					// knows its previous's id
	od;
	
	byte p=0;						//In this loop each processor send its
	do							//previous' array data to the next processor,
	:: p<N -> to_next!previous_code[p] ->p++		//e.g. processor A sends D's array to the B
	::p==N -> break
	od;
	
	byte pp=0;						//In this loop each processor stores the
	do							//received data into the local variable
	::pp<N -> from_previous?xprevious_code[pp] ->pp++	//array xprevious_code
	::pp==N -> break
	od;
	
	byte l=0;			// In this loop every processor stores the received data into the
	do				//R array, the if statement is being used to distinguish the
	:: l<N -> 			//processor B from the others, because processor B cannot
		if			//take advantage from the following formula so as to store processor D's data
		:: my_id==1 -> R[3*N+l]=xprevious_code[l] -> l++		
		:: my_id!=1 -> R[(previous_id-1)*N + l] = xprevious_code[l] -> l++
		fi
	:: l==N -> break
	od;
	
	byte u=0;					//This is the last loop in which the processors send 
	do						//messages forward
	:: u<N -> to_next!xprevious_code[u] -> u++
	:: u==N -> break
	od;
	
	byte uu=0;					//In this loop every processor receives the last data
	do						//which were missing and store them into the
	:: uu<N -> from_previous?previous_code[uu] -> uu++		//local array previous_code
	:: uu==N -> break
	od;

	byte t=0;			//in this loop each processor stores the received data into the R
	do				//the if statement is being used to distinguish the processors B and C
	:: t<N ->			//from the others. Processors B and C cannot use the folloing formula
		if			//so as to store the received data into the correct slots.
		:: my_id== 1 -> R[2*N+t] = previous_code[t] -> t++
		:: my_id== 2 -> R[3*N+t] = previous_code[t] -> t++
		:: else -> R[(previous_id-2)*N +t] = previous_code[t] -> t++
		fi
	:: t==N -> break
	od;

	byte h=0;						//In this loop every processor calculates the
	do							//password and stores it into the local array RT
	:: h<N -> RT[h]= ((R[h] && R[h+2]) || (R[h+4] && R[h+6])) -> h++
	:: h==N -> break
	od;
atomic{
	byte g=0;						//By using this loop, every processor send the
    end2:
	do							//RT array to the receiver.
	:: g<N -> to_receiver!RT[g] -> g++
	:: g==N -> break
	od
}
}
proctype receiver (chan from_A,from_B,from_C,from_D)		//the receiver takes four channels as inputs
{	bit result[N];						//in oder to receive the password from the processors
	byte j=1;						//the local variable attary result is being used
	atomic{							//in order to store the password
	if
	::from_A?result[0]->do
			::j<N -> from_A?result[j]->j++		//this structure ensures that the receiver will receive
			::j==N-> break				//the whole password only from one processor
			od					//avoiding situations that different messages are being
	::from_B?result[0]->do					//received from different processors
			::j<N -> from_B?result[j]->j++
			::j==N-> break
			od
	::from_C?result[0]->	do
			::j<N -> from_C?result[j]->j++
			::j==N-> break
			od
	::from_D?result[0]-> do
			::j<N -> from_D?result[j]->j++
			::j==N-> break
			od
	fi
	}
	byte f=0;			//the receiver make use of the assertion. It checks if the received password is correct
	do				//otherwise an assertion violation occurs
	:: f<N -> assert(result[f]== ((init_data[f] && init_data[f+2]) || (init_data[f+4] && init_data[f+6]))) -> f++
	:: f==N -> break
	od
	
}
init {
	chan AtoB = [N] of {bit}; chan BtoC=[N] of {bit}; chan CtoD=[N] of {bit};	//the channels of the code
	chan DtoA=[N] of {bit}; chan AtoR=[N] of {bit}; chan BtoR=[N] of {bit};		//are being declared
	chan CtoR=[N] of {bit}; chan DtoR = [N] of {bit};
atomic {
	init_data[0]=1; init_data[1]=0; init_data[2]=1; init_data[3]=1;			//the global array init_data
	init_data[4]=1; init_data[5]=0; init_data[6]=1; init_data[7]=0;			//is being initialized
	
	run proc(0,1,3,AtoB,DtoA,AtoR); run proc(1,2,0,BtoC,AtoB,BtoR);			//we make use of the run
	run proc(2,3,1,CtoD,BtoC,CtoR); run proc(3,0,2,DtoA,CtoD,DtoR);			//function in order to
	run receiver(AtoR,BtoR,CtoR,DtoR)						//operate the processors
	}										//and the receiver
} 
